//------------------------------------------------------------------------------
// @file : res_data.h
// @author     Matthew Hird
// @date       February 20, 2018
//
// @brief      Stores taxi reservation data. Methods can return the pickup time
//             stored in a comparable form, as well as return the stored data in
//             a formatted form. Also, the i/o stream operators have been
//             overloaded to write stored data to a file or to accept and store
//             data in the same format.
//------------------------------------------------------------------------------

#pragma once
#include <fstream>
#include <iostream>


class ResData
{
private:
    int hour;
    int minute;
    int time;      // Pickup time stored as a 4 digit integer (e.g. 1:30 = 0130)
    std::string location;
    std::string name;

    
public:
    /**
     * @brief      Default constructor. Initializes ints to 0 and leaves
     *             std::strings blank.
     */
    ResData();


    /**
     * @brief      Parameterized constructor. Initializes private variables to
     *             specified values.
     *
     * @param[in]  hr    Pickup hour of reservation.
     * @param[in]  min   Pickup minute of reservation.
     * @param[in]  loc   Pickup location of reservation.
     * @param[in]  nam   Name of the client contact.
     */
    ResData(int hr, int min, const std::string& loc, const std::string& nam);


    /**
     * @brief      Copy constructor. Initializes the values of private variables
     *             to be copies of the same fields from the specified ResData
     *             object.
     *
     * @param[in]  old   The ResData object being copied.
     */
    ResData(const ResData& old);
    

    /**
     * @brief      Class destructor.
     */
    ~ResData();
    
    
    /**
     * @brief      Gets the time in a comparable form.
     *
     * @return     Value of time.
     */
    int get_time(); 


    /**
     * @brief      Puts the data in a formatted form with headers and returns
     *             the information as a single string.
     *
     * @return     Data stored in ResData in a printable form.
     */
    std::string display_data();

    
    /**
     * @brief      The ostream << operator is overloaded to write the ResData's
     *             constructor parameters in a simple format. Used to store
     *             ResData's data in a form that can be interpreted by the
     *             overloaded istream >> operator.
     *
     * @param      ostr  The ostream object using the operator (left operand).
     * @param[in]  data  The ResData object being read from (right operand).
     *
     * @return     A reference to the ostream object itself, to support chaining
     *             multiple << operations.
     */
    friend std::ostream& operator<<(std::ostream& ostr, const ResData* data);   

    
    /**
     * @brief      The istream >> operator is overloaded to stream in parameters
     *             in specific format, and replaces the ResData's values with
     *             those values. Can interpret data generated by the overloaded
     *             ostream << operator.
     *
     * @param      istr  The istream object using the operator (left operand).
     * @param      data  The ResData object being written to (right operand).
     *
     * @return     A reference to the istream object itself, to support chaining
     *             multiple >> operations.
     */
    friend std::istream& operator>>(std::istream& istr, ResData* data);  
};